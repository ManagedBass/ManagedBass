name: Build and Package for Release
on:
  push:
   branches:
     - multitarget-fixes
  release:
    types:
      - published
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Official NuGet Feed settings
  SOLUTION_FILE: ManagedBass.sln
jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
      - name: Restore
        run: dotnet restore
        working-directory: ${{ github.workspace }}/src
      - name: Build
        run: dotnet build -c Release --no-restore
        working-directory: ${{ github.workspace }}/src
      - name: Test
        run: dotnet test -c Release
        working-directory: ${{ github.workspace }}/src
  build-and-deploy:
    needs: build-test
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
      - name: Setup Nuget
        uses: NuGet/setup-nuget@v1.0.5
      - name: Restore
        run: dotnet restore
        working-directory: ${{ github.workspace }}/src
      - name: Create Release NuGet package
        working-directory: ${{ github.workspace }}/src
        run: |
          # Extract the version number from the tag reference with fallback
          if [ -z "${{ github.ref }}" ]; then
            echo "GitHub ref is empty, using fallback version"
            VERSION="1.0.0"
          else
            # Split the ref by '/' and get the 3rd element (index 2 in 0-based)
            IFS='/' read -ra REF_ARRAY <<< "${{ github.ref }}"
            
            if [ ${#REF_ARRAY[@]} -lt 3 ]; then
              echo "GitHub ref doesn't have expected format, using fallback version"
              VERSION="1.0.0"
            else
              VERSION="${REF_ARRAY[2]}"
              echo "Version from ref: $VERSION"
              # Remove leading 'v' if present
              VERSION="${VERSION#v}"
            fi
          fi
          
          echo "Using version: $VERSION"
          
          dotnet build -c Release --no-restore -p:Version=$VERSION
        
          # Pack all the projects. This works for all but the multi-target projects.
          dotnet pack -v normal -c Release --no-build -p:PackageVersion=$VERSION -o nupkg
          
      - name: Upload Packages as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ${{ github.workspace }}/src/nupkg/*.*
          retention-days: 5
                 
      - name: Push to NuGet Feed
        working-directory: ${{ github.workspace }}/src/nupkg
        if: github.event_name == 'release'
        run: dotnet nuget push "*.nupkg" --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{ secrets.NUGET_KEY }}
