name: Build and Package for Release
on:
  push:
   branches:
     - automation/github-action-for-package-publishing
  release:
    types:
      - published
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Official NuGet Feed settings
  SOLUTION_FILE: ManagedBass.sln
jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Restore
        run: dotnet restore
        working-directory: ${{ github.workspace }}/src
      - name: Build
        run: dotnet build -c Release --no-restore
        working-directory: ${{ github.workspace }}/src
      - name: Test
        run: dotnet test -c Release
        working-directory: ${{ github.workspace }}/src
  build-and-deploy:
    needs: build-test
    if: github.event_name == 'release'
    runs-on: windows-latest #NOTE We're running the package build on windows, as we need to use nuget pack and push
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Setup Nuget
        uses: NuGet/setup-nuget@v1.0.5
      - name: Restore
        run: dotnet restore
        working-directory: ${{ github.workspace }}/src
      - name: Create Release NuGet package
        working-directory: ${{ github.workspace }}\src
        run: |
          # Extract the version number from the tag reference
          $arrTag="${{ github.ref }}".Split('/')
          $VERSION=$arrTag[2]
          echo Version: $VERSION
          $VERSION=$VERSION.TrimStart('v')
          echo Clean Version: $VERSION
          
          dotnet build -c Release --no-restore -p:Version=$VERSION

          # Pack all the projects. This works for all but the multi-target projects.
          dotnet pack -v normal -c Release --no-build -p:PackageVersion=$VERSION -o nupkg
          
          # Now pack the nuspec files - These are handled differently as they target multiple platforms.
          # The resulting nupkg file overwrites the ones created in the above dotnet pack stage.
          nuget pack Bass/ManagedBass.nuspec -Version $VERSION -OutputDirectory nupkg
          nuget pack AddOns/BassEnc/ManagedBass.Enc.nuspec -Version $VERSION -OutputDirectory nupkg
          nuget pack AddOns/BassMidi/ManagedBass.Midi.nuspec -Version $VERSION -OutputDirectory nupkg
          
      - name: Upload Packages as artifact
        uses: actions/upload-artifact@v2
        with:
          name: nuget-packages
          path: ${{ github.workspace }}\src\nupkg\*.*
          retention-days: 5
                 
      - name: Push to NuGet Feed
        working-directory: ${{ github.workspace }}\src\nupkg
        run: dotnet nuget push "*.nupkg" --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{ secrets.NUGET_KEY }}
